
NoSQL - ADMINISTRATION & SHELL COMMANDS


1.      Write a MongoDB query to create a user “CUSTOMER1” and grant the read role in the INVOICE database.




invoice> db.createUser({ user: "CUSTOMER1", pwd: "123", roles: [{ role: "read", db: "invoice" }] });
{ ok: 1 }



2.      Write a MongoDB query to create the backup for the INVOICE database.


(base) ksb@ksb-H410M-H-V2:~$ mongodump --db=invoice --out=./backup
2025-04-22T14:24:35.871+0530	writing invoice.PRODUCT to backup/invoice/PRODUCT.bson
2025-04-22T14:24:35.873+0530	done dumping invoice.PRODUCT (2 documents)
2025-04-22T14:24:35.874+0530	writing invoice.CUSTOMER to backup/invoice/CUSTOMER.bson
2025-04-22T14:24:35.875+0530	done dumping invoice.CUSTOMER (7 documents)




3.      Write a MongoDB query to restore a particular database or a collection.



(base) ksb@ksb-H410M-H-V2:~$ mongorestore --db invoice /home/ksb/backup/invoice
2025-04-22T14:25:48.547+0530	The --db and --collection flags are deprecated for this use-case; please use --nsInclude instead, i.e. with --nsInclude=${DATABASE}.${COLLECTION}
2025-04-22T14:25:48.548+0530	building a list of collections to restore from /home/ksb/backup/invoice dir
2025-04-22T14:25:48.548+0530	reading metadata for invoice.PRODUCT from /home/ksb/backup/invoice/PRODUCT.metadata.json
2025-04-22T14:25:48.548+0530	reading metadata for invoice.CUSTOMER from /home/ksb/backup/invoice/CUSTOMER.metadata.json
2025-04-22T14:25:48.548+0530	restoring to existing collection invoice.CUSTOMER without dropping
2025-04-22T14:25:48.548+0530	restoring invoice.CUSTOMER from /home/ksb/backup/invoice/CUSTOMER.bson
2025-04-22T14:25:48.548+0530	restoring to existing collection invoice.PRODUCT without dropping
2025-04-22T14:25:48.548+0530	restoring invoice.PRODUCT from /home/ksb/backup/invoice/PRODUCT.bson
2025-04-22T14:25:48.550+0530	continuing through error: E11000 duplicate key error collection: invoice.PRODUCT index: _id_ dup key: { _id: ObjectId('67ff80a433fba8bb5fef6350') }
2025-04-22T14:25:48.550+0530	continuing through error: E11000 duplicate key error collection: invoice.PRODUCT index: _id_ dup key: { _id: ObjectId('67ff80b733fba8bb5fef6351') }
2025-04-22T14:25:48.550+0530	continuing through error: E11000 duplicate key error collection: invoice.CUSTOMER index: _id_ dup key: { _id: ObjectId('67fe2ecba262cfa72aef6355') }
2025-04-22T14:25:48.550+0530	continuing through error: E11000 duplicate key error collection: invoice.CUSTOMER index: _id_ dup key: { _id: ObjectId('67fe2ed7a262cfa72aef6356') }
2025-04-22T14:25:48.550+0530	continuing through error: E11000 duplicate key error collection: invoice.CUSTOMER index: _id_ dup key: { _id: ObjectId('67ff716733fba8bb5fef634b') }
2025-04-22T14:25:48.550+0530	continuing through error: E11000 duplicate key error collection: invoice.CUSTOMER index: _id_ dup key: { _id: ObjectId('67ff71cd33fba8bb5fef634c') }
2025-04-22T14:25:48.550+0530	continuing through error: E11000 duplicate key error collection: invoice.CUSTOMER index: _id_ dup key: { _id: ObjectId('67ff71cd33fba8bb5fef634d') }
2025-04-22T14:25:48.550+0530	continuing through error: E11000 duplicate key error collection: invoice.CUSTOMER index: _id_ dup key: { _id: ObjectId('67ff752d33fba8bb5fef634e') }
2025-04-22T14:25:48.550+0530	continuing through error: E11000 duplicate key error collection: invoice.CUSTOMER index: _id_ dup key: { _id: ObjectId('67ff752d33fba8bb5fef634f') }
2025-04-22T14:25:48.558+0530	finished restoring invoice.CUSTOMER (0 documents, 7 failures)
2025-04-22T14:25:48.558+0530	finished restoring invoice.PRODUCT (0 documents, 2 failures)
2025-04-22T14:25:48.558+0530	no indexes to restore for collection invoice.CUSTOMER
2025-04-22T14:25:48.558+0530	no indexes to restore for collection invoice.PRODUCT
2025-04-22T14:25:48.558+0530	0 document(s) restored successfully. 9 document(s) failed to restore.



4.      Write a MongoDB query to create an index for the collection customer using the field customer_name.



invoice> db.CUSTOMER.createIndex({cname:1})
cname_1
invoice> db.CUSTOMER.getIndexes()
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { cname: 1 }, name: 'cname_1' }
]

//VERIFIED
