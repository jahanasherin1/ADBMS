NoSQL CRUD


1.      Write a MongoDB query to create an INVOICE database and collections (CUSTOMER, PRODUCT) and its corresponding documents.



INVOICE> use invoice;
switched to db invoice


invoice> db.CUSTOMER.insert({cust_id:"1001",name:"Jahana",phone:"8304084974",city: "kdy"})  
{
  acknowledged: true,
  insertedIds: { '0': ObjectId('67fe2ecba262cfa72aef6355') }
}


invoice> db.CUSTOMER.insertMany([{cust_id:"1002",name:"Frina",phone:"1234567890",city: "tkm"},{cust_id:"1003",name:"Ajay",phone:"7034534928",city: "mkm"}])  
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('67fe2ed7a262cfa72aef6356'),
    '1': ObjectId('67fe2ed7a262cfa72aef6357')
  }
}


invoice> db.PRODUCT.insertOne({p_id:"01",pname:"Pen",price:"100"},{p_id:"02",pname:"Pencil",price:"120"})
{
  acknowledged: true,
  insertedId: ObjectId('67fe2edba262cfa72aef6358')
}


2.      Write a MongoDB query to find all documents from the collection CUSTOMER



invoice>  db.CUSTOMER.find()
[
  {
    _id: ObjectId('67fe2ecba262cfa72aef6355'),
    cust_id: '1001',
    name: 'Jahana',
    phone: '8304084974',
    city: 'kdy'
  },
  {
    _id: ObjectId('67fe2ed7a262cfa72aef6356'),
    cust_id: '1002',
    name: 'Frina',
    phone: '1234567890',
    city: 'tkm'
  },
  {
    _id: ObjectId('67fe2ed7a262cfa72aef6357'),
    cust_id: '1003',
    name: 'Ajay',
    phone: '7034534928',
    city: 'mkm'
  }
]




3.      Write a MongoDB query to update the city in the collection CUSTOMER.



invoice> db.CUSTOMER.update({ cust_id: "1003" }, { $set: { city: "Calicut" } })
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}



4.      Write a MongoDB query to delete the first matched document whose city is “Calicut”.



invoice> db.CUSTOMER.deleteOne({city:"Calicut"})
{ acknowledged: true, deletedCount: 1 }


